#cloud-config
coreos:
  update:
    reboot-strategy: "off"
  units:
    - name: kubelet.service
      command: start
      content: |
        [Unit]
        After=flanneld.service docker.service
        Wants=flanneld.service docker.service

        [Service]
        ExecStartPre=/usr/bin/systemctl is-active flanneld.service
        Environment=KUBELET_IMAGE_TAG=${kubernetes_version}
        Environment="RKT_RUN_ARGS=--uuid-file-save=/var/run/kubelet-pod.uuid \
          --volume dns,kind=host,source=/etc/resolv.conf \
          --mount volume=dns,target=/etc/resolv.conf \
          --volume var-log,kind=host,source=/var/log \
          --mount volume=var-log,target=/var/log"
        ExecStartPre=/usr/bin/mkdir -p /var/log/containers
        ExecStartPre=-/usr/bin/rkt rm --uuid-file=/var/run/kubelet-pod.uuid
        ExecStart=/usr/lib/coreos/kubelet-wrapper \
          --api-servers=https://${kubernetes_api_dns_name}:443 \
          --cni-conf-dir=/etc/kubernetes/cni/net.d \
          --container-runtime=docker \
          --register-node=true \
          --allow-privileged=true \
          --pod-manifest-path=/etc/kubernetes/manifests \
          --cluster_dns=${kubernetes_dns_service_ip} \
          --cluster_domain=cluster.local \
          --kubeconfig=/etc/kubernetes/node-kubeconfig.yaml \
          --tls-cert-file=/etc/kubernetes/tls/node.pem \
          --tls-private-key-file=/etc/kubernetes/tls/node-key.pem \
          --pod-infra-container-image ${pod_infra_image_repo}:${pod_infra_version}
        ExecStop=-/usr/bin/rkt stop --uuid-file=/var/run/kubelet-pod.uuid
        Restart=always
        RestartSec=10

        [Install]
        WantedBy=multi-user.target
    - name: docker-gc.service
      content: |
        [Unit]
        Description=Cleanup docker images and volumes
        Requires=docker.service
        ConditionPathExists=/opt/bin/docker-gc.sh

        [Service]
        Type=simple
        ExecStart=/opt/bin/docker-gc.sh
    - name: docker-gc.timer
      command: start
      content: |
        [Unit]
        Description=Run docker-gc daily

        [Timer]
        OnCalendar=daily
        Unit=docker-gc.service
    - name: docker-logrotate.service
      content: |
        [Unit]
        Description=Rotate docker container logs
        Requires=docker.service
        ConditionPathExists=/etc/logrotate.d/docker-containers.conf

        [Service]
        Type=simple
        ExecStart=/usr/sbin/logrotate -f -v /etc/logrotate.d/docker-containers.conf
    - name: docker-logrotate.timer
      command: start
      content: |
        [Unit]
        Description=Rotate docker logs hourly

        [Timer]
        OnCalendar=hourly
        Unit=docker-logrotate.service
    - name: docker.service
      command: start
      drop-ins:
        - name: 10-docker-mount.conf
          content: |
            [Unit]
            After=var-lib-docker.mount
            Wants=var-lib-docker.mount
        - name: 20-opt-data-mount.conf
          content: |
            [Unit]
            After=opt-data.mount
            Wants=opt-data.mount
        - name: 30-opt-logging-mount.conf
          content: |
            [Unit]
            After=opt-logging.mount
            Wants=opt-logging.mount
        - name: 40-flannel.conf
          content: |
            [Unit]
            Requires=flanneld.service
            After=flanneld.service
    - name: opt-logging.mount
      command: start
      content: |
        [Unit]
        Description=Mount disk to /opt/logging
        Requires=format-logging-volume.service
        After=format-logging-volume.service

        [Mount]
        What=/dev/xvdh
        Where=/opt/logging
        Type=ext4

        [Install]
        RequiredBy=docker.service
    - name: format-logging-volume.service
      command: start
      content: |
        [Unit]
        Description=Formats logging EBS volume
        After=dev-xvdh.device
        Requires=dev-xvdh.device
        Before=opt-logging.mount

        [Service]
        Type=oneshot
        RemainAfterExit=yes
        Environment="LABEL=opt-logging"
        Environment="DEV=/dev/xvdh"
        # Do not wipe the disk if it's already being used, so the data is persisted across reboots.
        ExecStart=-/bin/bash -c "if ! findfs LABEL=$LABEL > /tmp/label.$LABEL; then wipefs -a -f $DEV && mkfs.ext4 -T news -F -L $LABEL $DEV && echo wiped; fi"

        [Install]
        RequiredBy=opt-logging.mount
    - name: opt-data.mount
      command: start
      content: |
        [Unit]
        Description=Mount disk to /opt/data
        Requires=format-data-volume.service
        After=format-data-volume.service
        Before=docker.service

        [Mount]
        What=/dev/xvdg
        Where=/opt/data
        Type=ext4

        [Install]
        RequiredBy=docker.service
    - name: format-data-volume.service
      command: start
      content: |
        [Unit]
        Description=Formats data EBS volume
        After=dev-xvdg.device
        Requires=dev-xvdg.device
        Before=opt-data.mount

        [Service]
        Type=oneshot
        RemainAfterExit=yes
        Environment="LABEL=opt-data"
        Environment="DEV=/dev/xvdg"
        # Do not wipe the disk if it's already being used, so the docker images are persisted across reboots.
        ExecStart=-/bin/bash -c "if ! findfs LABEL=$LABEL > /tmp/label.$LABEL; then wipefs -a -f $DEV && mkfs.ext4 -T news -F -L $LABEL $DEV && echo wiped; fi"

        [Install]
        RequiredBy=opt-data.mount
    - name: var-lib-docker.mount
      command: start
      content: |
        [Unit]
        Description=Mount disk to /var/lib/docker
        Requires=format-docker-volume.service
        After=format-docker-volume.service
        Before=docker.service

        [Mount]
        What=/dev/xvdf
        Where=/var/lib/docker
        Type=ext4

        [Install]
        RequiredBy=docker.service
    - name: format-docker-volume.service
      command: start
      content: |
        [Unit]
        Description=Formats docker EBS volume
        After=dev-xvdf.device
        Requires=dev-xvdf.device
        Before=var-lib-docker.mount

        [Service]
        Type=oneshot
        RemainAfterExit=yes
        Environment="LABEL=var-lib-docker"
        Environment="DEV=/dev/xvdf"
        # Do not wipe the disk if it's already being used, so the docker images are persisted across reboots.
        ExecStart=-/bin/bash -c "if ! findfs LABEL=$LABEL > /tmp/label.$LABEL; then wipefs -a -f $DEV && mkfs.ext4 -T news -F -L $LABEL $DEV && echo wiped; fi"

        [Install]
        RequiredBy=var-lib-docker.mount
    - name: flanneld.service
      command: start
      drop-ins:
        - name: 40-ExecStartPre-symlink.conf
          content: |
            [Unit]
            Wants=etcd-cluster-health.service
            After=etcd-cluster-health.service

            [Service]
            ExecStartPre=/usr/bin/ln -sf /etc/flannel/options.env /run/flannel/options.env
    - name: etcd-cluster-health.service
      command: start
      enable: true
      content: |
        [Unit]
        Before=flanneld.service
        After=prepare-tls-assets.service
        Wants=prepare-tls-assets.service

        [Service]
        Type=simple
        StartLimitInterval=0
        RestartSec=10
        Restart=on-failure
        EnvironmentFile=/etc/environment
        ExecStart=/bin/etcdctl --endpoints=$etcd_endpoint_urls cluster-health

        [Install]
        RequiredBy=flanneld.service
    - name: prepare-tls-assets.service
      command: start
      content: |
        [Unit]
        Description=Prepare TLS assets
        Before=etcd-cluster-health.service

        [Service]
        Type=oneshot
        RemainAfterExit=true
        ExecStart=/opt/bin/prepare-tls-assets.sh

        [Install]
        RequiredBy=etcd-cluster-health.service
    - name: update-engine.service
      command: stop
      enable: false
    - name: locksmithd.service
      command: stop
      enable: false
    - name: etcd2.service
      command: stop
      enable: false
write_files:
  - path: /etc/environment
    permissions: 0644
    content: |
      COREOS_PUBLIC_IPV4=$public_ipv4
      COREOS_PRIVATE_IPV4=$private_ipv4
      ETCDCTL_API=3
      ETCDCTL_CA_FILE=/etc/kubernetes/tls-etcd/ca-chain.pem
      ETCDCTL_CERT_FILE=/etc/kubernetes/tls-etcd/etcd-client.pem
      ETCDCTL_KEY_FILE=/etc/kubernetes/tls-etcd/etcd-client-key.pem
  - path: /etc/flannel/options.env
    permissions: 0644
    content: |
      ETCD_SSL_DIR=/etc/kubernetes/tls-etcd
      FLANNELD_IFACE=$private_ipv4
      FLANNELD_ETCD_ENDPOINTS=$etcd_endpoint_urls
      FLANNELD_ETCD_CAFILE=/etc/kubernetes/tls-etcd/ca-chain.pem
      FLANNELD_ETCD_CERTFILE=/etc/kubernetes/tls-etcd/etcd-client.pem
      FLANNELD_ETCD_KEYFILE=/etc/kubernetes/tls-etcd/etcd-client-key.pem
  - path: /etc/kubernetes/cni/net.d/10-flannel.conf
    permissions: 0644
    content: |
      {
          "name": "podnet",
          "type": "flannel",
          "delegate": {
              "isDefaultGateway": true
          }
      }
  - path: /opt/bin/prepare-tls-assets.sh
    permissions: 0700
    owner: root:root
    content: |
      #!/bin/bash

      mkdir -p /etc/kubernetes/tls
      chmod 755 /root/cloudinit/tls/tls-provision.sh
      cd /root/cloudinit/tls
      ./tls-provision.sh generate-ca $k8s_cluster_name
      ./tls-provision.sh generate-assets $k8s_cluster_name
      mv /root/cloudinit/tls/tls_ca/*.pem /etc/kubernetes/tls
      mv /root/cloudinit/tls/tls_assets/*.pem /etc/kubernetes/tls

      mkdir -p /etc/kubernetes/tls-etcd
      etcd_pki=$k8s_cluster_name
      ./tls-provision.sh generate-ca "$etcd_pki-etcd"
      ./tls-provision.sh generate-assets "$etcd_pki-etcd"
      mv /root/cloudinit/tls/tls_ca/*.pem /etc/kubernetes/tls-etcd
      mv /root/cloudinit/tls/tls_assets/*.pem /etc/kubernetes/tls-etcd
  - path: /opt/bin/docker-gc.sh
    permissions: 0700
    owner: root
    content: |
      #!/usr/bin/bash

      /usr/bin/docker rm -v $(docker ps -a -q -f status=exited)
      /usr/bin/docker rmi $(docker images -q -f dangling=true)
      /usr/bin/docker volume rm $(docker volume ls -q -f dangling=true)
  - path: /etc/logrotate.d/docker-containers.conf
    permissions: 0644
    owner: root
    content: |
      /var/lib/docker/containers/*/*.log {
        rotate 5
        copytruncate
        missingok
        notifempty
        compress
        maxsize 10M
        daily
        create 0644 root root
      }
  - path: /etc/kubernetes/manifests/kube-proxy.yaml
    content: |
      apiVersion: v1
      kind: Pod
      metadata:
        name: kube-proxy
        namespace: kube-system
      spec:
        hostNetwork: true
        containers:
        - name: kube-proxy
          image: ${kubernetes_hyperkube_image_repo}:${kubernetes_version}
          ${node_kube_proxy_environment}
          command:
          - /hyperkube
          - proxy
          - --master=https://${kubernetes_api_dns_name}:443
          - --kubeconfig=/etc/kubernetes/node-kubeconfig.yaml
          securityContext:
            privileged: true
          volumeMounts:
            - mountPath: /etc/tls/certs
              name: "tls-certs"
            - mountPath: /etc/kubernetes/node-kubeconfig.yaml
              name: "kubeconfig"
              readOnly: true
            - mountPath: /etc/kubernetes/tls
              name: "etc-kube-tls"
              readOnly: true
        volumes:
          - name: "tls-certs"
            hostPath:
              path: "/usr/share/ca-certificates"
          - name: "kubeconfig"
            hostPath:
              path: "/etc/kubernetes/node-kubeconfig.yaml"
          - name: "etc-kube-tls"
            hostPath:
              path: "/etc/kubernetes/tls"
  - path: /etc/kubernetes/node-kubeconfig.yaml
    content: |
      apiVersion: v1
      kind: Config
      clusters:
        - name: local
          cluster:
            certificate-authority: /etc/kubernetes/tls/ca-chain.pem
      contexts:
        - context:
            cluster: local
            user: node
          name: node-context
      current-context: node-context
      users:
        - name: node
          user:
            client-certificate: /etc/kubernetes/tls/api-server-client.pem
            client-key: /etc/kubernetes/tls/api-server-client-key.pem
  - path: /etc/systemd/system.conf.d/10-default-env.conf
    permissions: 0644
    owner: root:root
    content: |
        ${system_proxy}
  - path: /etc/docker-environment.env
    permissions: 0644
    owner: root:root
    content: |
        ${docker_proxy}
  - path: /etc/profile.env
    permissions: 0644
    owner: root:root
    content: |
        ${user_proxy}
