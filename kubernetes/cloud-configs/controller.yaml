#cloud-config
coreos:
  update:
    reboot-strategy: "off"
  units:
    - name: install-kube-system.service
      command: start
      enable: true
      runtime: true
      content: |
        [Unit]
        After=kubelet.service docker.service
        Wants=kubelet.service docker.service

        [Service]
        Type=simple
        StartLimitInterval=0
        RestartSec=10
        Restart=on-failure
        ExecStartPre=/usr/bin/systemctl is-active kubelet.service
        ExecStartPre=/usr/bin/systemctl is-active docker.service
        ExecStartPre=/usr/bin/curl -s -f http://127.0.0.1:8080/version
        ExecStart=/opt/bin/install-kube-system.sh
    - name: kubelet.service
      command: start
      enable: true
      content: |
        [Unit]
        After=flanneld.service docker.service
        Wants=flanneld.service docker.service

        [Service]
        ExecStartPre=/usr/bin/systemctl is-active flanneld.service
        Environment=KUBELET_IMAGE_TAG=${kubernetes_version}
        Environment="RKT_RUN_ARGS=--uuid-file-save=/var/run/kubelet-pod.uuid \
          --set-env-file=/etc/docker-environment.env \
          --volume var-log,kind=host,source=/var/log \
          --mount volume=var-log,target=/var/log \
          --volume dns,kind=host,source=/etc/resolv.conf \
          --mount volume=dns,target=/etc/resolv.conf"
        ExecStartPre=/usr/bin/mkdir -p /var/log/containers
        ExecStartPre=-/usr/bin/rkt rm --uuid-file=/var/run/kubelet-pod.uuid
        ExecStart=/usr/lib/coreos/kubelet-wrapper \
          --api-servers=http://127.0.0.1:8080 \
          --register-schedulable=false \
          --cni-conf-dir=/etc/kubernetes/cni/net.d \
          --container-runtime=docker \
          --allow-privileged=true \
          --pod-manifest-path=/etc/kubernetes/manifests \
          --cluster_dns=${kubernetes_dns_service_ip} \
          --cluster_domain=cluster.local \
          --pod-infra-container-image ${pod_infra_image_repo}:${pod_infra_version}
        ExecStop=-/usr/bin/rkt stop --uuid-file=/var/run/kubelet-pod.uuid
        Restart=always
        RestartSec=10

        [Install]
        WantedBy=multi-user.target
    - name: docker-gc.service
      enable: true
      content: |
        [Unit]
        Description=Cleanup docker images and volumes
        Requires=docker.service
        ConditionPathExists=/opt/bin/docker-gc.sh

        [Service]
        Type=simple
        ExecStart=/opt/bin/docker-gc.sh
    - name: docker-gc.timer
      command: start
      enable: true
      content: |
        [Unit]
        Description=Run docker-gc daily

        [Timer]
        OnCalendar=daily
        Unit=docker-gc.service
    - name: docker-logrotate.service
      enable: true
      content: |
        [Unit]
        Description=Rotate docker container logs
        Requires=docker.service
        ConditionPathExists=/etc/logrotate.d/docker-containers.conf

        [Service]
        Type=simple
        ExecStart=/usr/sbin/logrotate -f -v /etc/logrotate.d/docker-containers.conf
    - name: docker-logrotate.timer
      command: start
      enable: true
      content: |
        [Unit]
        Description=Rotate docker logs hourly

        [Timer]
        OnCalendar=hourly
        Unit=docker-logrotate.service
    - name: docker.service
      command: start
      enable: true
      drop-ins:
        - name: 10-docker-mount.conf
          content: |
            [Unit]
            After=var-lib-docker.mount
            Wants=var-lib-docker.mount
        - name: 40-flannel.conf
          content: |
            [Unit]
            Requires=flanneld.service
            After=flanneld.service

            [Service]
            ExecStartPre=/usr/bin/systemctl is-active flanneld.service
    - name: var-lib-docker.mount
      command: start
      enable: true
      content: |
        [Unit]
        Description=Mount disk to /var/lib/docker
        Requires=format-docker-volume.service
        After=format-docker-volume.service
        Before=docker.service

        [Mount]
        What=/dev/xvdf
        Where=/var/lib/docker
        Type=ext4

        [Install]
        RequiredBy=docker.service
    - name: format-docker-volume.service
      command: start
      enable: true
      content: |
        [Unit]
        Description=Formats docker EBS volume
        After=dev-xvdf.device
        Requires=dev-xvdf.device
        Before=var-lib-docker.mount

        [Service]
        Type=oneshot
        RemainAfterExit=yes
        Environment="LABEL=var-lib-docker"
        Environment="DEV=/dev/xvdf"
        # Do not wipe the disk if it's already being used, so the docker images are persisted across reboots.
        ExecStart=-/bin/bash -c "if ! findfs LABEL=$LABEL > /tmp/label.$LABEL; then wipefs -a -f $DEV && mkfs.ext4 -T news -F -L $LABEL $DEV && echo wiped; fi"

        [Install]
        RequiredBy=var-lib-docker.mount
    - name: flanneld.service
      command: start
      enable: true
      drop-ins:
        - name: 10-etcd.conf
          content: |
            [Unit]
            Wants=etcd-cluster-health.service
            After=etcd-cluster-health.service

            [Service]
            EnvironmentFile=/etc/environment
            ExecStartPre=/bin/etcdctl --endpoints=$etcd_endpoint_urls set "coreos.com/network/config" "{\"Network\" : \"${kubernetes_pod_cidr}\", \"Backend\" : {\"Type\" : \"vxlan\"}}"
        - name: 40-ExecStartPre-symlink.conf
          content: |
            [Unit]
            Wants=etcd-cluster-health.service
            After=etcd-cluster-health.service

            [Service]
            ExecStartPre=/usr/bin/ln -sf /etc/flannel/options.env /run/flannel/options.env
    - name: etcd-cluster-health.service
      command: start
      enable: true
      content: |
        [Unit]
        Before=flanneld.service
        After=prepare-tls-assets.service
        Wants=prepare-tls-assets.service

        [Service]
        Type=simple
        StartLimitInterval=0
        RestartSec=10
        Restart=on-failure
        EnvironmentFile=/etc/environment
        ExecStart=/bin/etcdctl --endpoints=$etcd_endpoint_urls cluster-health

        [Install]
        RequiredBy=flanneld.service
    - name: prepare-tls-assets.service
      command: start
      enable: true
      content: |
        [Unit]
        Description=Prepare TLS assets
        Before=etcd-cluster-health.service

        [Service]
        Type=oneshot
        RemainAfterExit=true
        ExecStart=/opt/bin/prepare-tls-assets.sh

        [Install]
        RequiredBy=etcd-cluster-health.service
    - name: update-engine.service
      command: stop
      enable: false
    - name: locksmithd.service
      command: stop
      enable: false
    - name: etcd2.service
      enable: false
      command: stop
write_files:
  - path: /etc/environment
    permissions: 0644
    content: |
      COREOS_PUBLIC_IPV4=$public_ipv4
      COREOS_PRIVATE_IPV4=$private_ipv4
      ETCDCTL_API=3
      ETCDCTL_CA_FILE=/etc/kubernetes/tls-etcd/ca-chain.pem
      ETCDCTL_CERT_FILE=/etc/kubernetes/tls-etcd/etcd-client.pem
      ETCDCTL_KEY_FILE=/etc/kubernetes/tls-etcd/etcd-client-key.pem
  - path: /etc/flannel/options.env
    permissions: 0644
    content: |
      ETCD_SSL_DIR=/etc/kubernetes/tls-etcd
      FLANNELD_IFACE=$private_ipv4
      FLANNELD_ETCD_ENDPOINTS=$etcd_endpoint_urls
      FLANNELD_ETCD_CAFILE=/etc/kubernetes/tls-etcd/ca-chain.pem
      FLANNELD_ETCD_CERTFILE=/etc/kubernetes/tls-etcd/etcd-client.pem
      FLANNELD_ETCD_KEYFILE=/etc/kubernetes/tls-etcd/etcd-client-key.pem
  - path: /etc/kubernetes/cni/net.d/10-flannel.conf
    permissions: 0644
    content: |
      {
          "name": "podnet",
          "type": "flannel",
          "delegate": {
              "isDefaultGateway": true
          }
      }
  - path: /opt/bin/prepare-tls-assets.sh
    permissions: 0700
    owner: root:root
    content: |
      #!/bin/bash

      mkdir -p /etc/kubernetes/tls
      chmod 755 /root/cloudinit/tls/tls-provision.sh
      cd /root/cloudinit/tls
      ./tls-provision.sh generate-ca $k8s_cluster_name
      ./tls-provision.sh generate-assets $k8s_cluster_name
      mv /root/cloudinit/tls/tls_ca/*.pem /etc/kubernetes/tls
      mv /root/cloudinit/tls/tls_assets/*.pem /etc/kubernetes/tls

      mkdir -p /etc/kubernetes/tls-etcd
      etcd_pki=$k8s_cluster_name
      ./tls-provision.sh generate-ca "$etcd_pki-etcd"
      ./tls-provision.sh generate-assets "$etcd_pki-etcd"
      mv /root/cloudinit/tls/tls_ca/*.pem /etc/kubernetes/tls-etcd
      mv /root/cloudinit/tls/tls_assets/*.pem /etc/kubernetes/tls-etcd
  - path: /opt/bin/docker-gc.sh
    permissions: 0700
    owner: root
    content: |
      #!/usr/bin/bash

      /usr/bin/docker rm -v $(docker ps -a -q -f status=exited)
      /usr/bin/docker rmi $(docker images -q -f dangling=true)
      /usr/bin/docker volume rm $(docker volume ls -q -f dangling=true)
  - path: /etc/logrotate.d/docker-containers.conf
    permissions: 0644
    owner: root
    content: |
      /var/lib/docker/containers/*/*.log {
        rotate 5
        copytruncate
        missingok
        notifempty
        compress
        maxsize 10M
        daily
        create 0644 root root
      }
  - path: /opt/bin/install-kube-system.sh
    permissions: 0700
    owner: root:root
    content: |
      #!/usr/bin/bash

      set -e

      # Kube System Namespace
      /usr/bin/curl -H "Content-Type: application/json" -XPOST -d @"/srv/kubernetes/manifests/kube-system.json" "http://127.0.0.1:8080/api/v1/namespaces"

      # Kube DNS Addon
      /usr/bin/curl -H "Content-Type: application/json" -XPOST -d @"/srv/kubernetes/manifests/kube-dns-rc.json" \
        "http://127.0.0.1:8080/api/v1/namespaces/kube-system/replicationcontrollers"
      /usr/bin/curl -H "Content-Type: application/json" -XPOST -d @"/srv/kubernetes/manifests/kube-dns-svc.json" \
        "http://127.0.0.1:8080/api/v1/namespaces/kube-system/services"
  - path: /etc/kubernetes/manifests/kube-proxy.yaml
    content: |
      apiVersion: v1
      kind: Pod
      metadata:
        name: kube-proxy
        namespace: kube-system
      spec:
        hostNetwork: true
        containers:
        - name: kube-proxy
          image: ${kubernetes_hyperkube_image_repo}:${kubernetes_version}
          ${controller_kube_proxy_environment}
          command:
          - /hyperkube
          - proxy
          - --master=http://127.0.0.1:8080
          - --proxy-mode=iptables
          securityContext:
            privileged: true
          volumeMounts:
          - mountPath: /etc/tls/certs
            name: tls-certs-host
            readOnly: true
        volumes:
        - hostPath:
            path: /usr/share/ca-certificates
          name: tls-certs-host
  - path: /etc/kubernetes/manifests/kube-apiserver.yaml
    content: |
      apiVersion: v1
      kind: Pod
      metadata:
        name: kube-apiserver
        namespace: kube-system
      spec:
        hostNetwork: true
        containers:
        - name: kube-apiserver
          image: ${kubernetes_hyperkube_image_repo}:${kubernetes_version}
          ${controller_kube_apiserver_environment}
          command:
          - /hyperkube
          - apiserver
          - --bind-address=0.0.0.0
          - --etcd-servers=$etcd_endpoint_urls
          - --allow-privileged=true
          - --service-cluster-ip-range=${kubernetes_service_cidr}
          - --insecure-bind-address=0.0.0.0
          - --secure-port=443
          - --advertise-address=$private_ipv4
          - --admission-control=NamespaceLifecycle,NamespaceExists,LimitRanger,ServiceAccount,ResourceQuota
          - --tls-cert-file=/etc/kubernetes/tls/api-server.pem
          - --tls-private-key-file=/etc/kubernetes/tls/api-server-key.pem
          - --client-ca-file=/etc/kubernetes/tls/ca-chain.pem
          - --service-account-key-file=/etc/kubernetes/tls/api-server-key.pem
          - --runtime-config=extensions/v1beta1/networkpolicies=true
          - --anonymous-auth=false
          - --storage-backend=etcd3
          - --etcd-cafile=/etc/kubernetes/tls-etcd/ca-chain.pem
          - --etcd-certfile=/etc/kubernetes/tls-etcd/etcd-client.pem
          - --etcd-keyfile=/etc/kubernetes/tls-etcd/etcd-client-key.pem
          - --cloud-provider=aws
          livenessProbe:
            httpGet:
              host: 127.0.0.1
              port: 8080
              path: /healthz
            initialDelaySeconds: 15
            timeoutSeconds: 15
          ports:
          - containerPort: 443
            hostPort: 443
            name: https
          - containerPort: 8080
            hostPort: 8080
            name: local
          volumeMounts:
          - mountPath: /etc/kubernetes/tls
            name: tls-certs-kubernetes
            readOnly: true
          - mountPath: /etc/kubernetes/tls-etcd
            name: tls-certs-etcd
            readOnly: true
          - mountPath: /etc/tls/certs
            name: tls-certs-host
            readOnly: true
        volumes:
        - hostPath:
            path: /etc/kubernetes/tls
          name: tls-certs-kubernetes
        - hostPath:
            path: /etc/kubernetes/tls-etcd
          name: tls-certs-etcd
        - hostPath:
            path: /usr/share/ca-certificates
          name: tls-certs-host
  - path: /etc/kubernetes/manifests/kube-controller-manager.yaml
    content: |
      apiVersion: v1
      kind: Pod
      metadata:
        name: kube-controller-manager
        namespace: kube-system
      spec:
        hostNetwork: true
        containers:
        - name: kube-controller-manager
          image: ${kubernetes_hyperkube_image_repo}:${kubernetes_version}
          ${controller_kube_controller_manager_environment}
          command:
          - /hyperkube
          - controller-manager
          - --master=http://127.0.0.1:8080
          - --leader-elect=true
          - --service-account-private-key-file=/etc/kubernetes/tls/api-server-key.pem
          - --root-ca-file=/etc/kubernetes/tls/ca-chain.pem
          - --cloud-provider=aws
          resources:
            requests:
              cpu: 200m
          livenessProbe:
            httpGet:
              host: 127.0.0.1
              path: /healthz
              port: 10252
            initialDelaySeconds: 15
            timeoutSeconds: 15
          volumeMounts:
          - mountPath: /etc/kubernetes/tls
            name: tls-certs-kubernetes
            readOnly: true
          - mountPath: /etc/tls/certs
            name: tls-certs-host
            readOnly: true
        hostNetwork: true
        volumes:
        - hostPath:
            path: /etc/kubernetes/tls
          name: tls-certs-kubernetes
        - hostPath:
            path: /usr/share/ca-certificates
          name: tls-certs-host
  - path: /etc/kubernetes/manifests/kube-scheduler.yaml
    content: |
      apiVersion: v1
      kind: Pod
      metadata:
        name: kube-scheduler
        namespace: kube-system
      spec:
        hostNetwork: true
        containers:
        - name: kube-scheduler
          image: ${kubernetes_hyperkube_image_repo}:${kubernetes_version}
          ${controller_kube_scheduler_environment}
          command:
          - /hyperkube
          - scheduler
          - --master=http://127.0.0.1:8080
          - --leader-elect=true
          resources:
            requests:
              cpu: 100m
          livenessProbe:
            httpGet:
              host: 127.0.0.1
              path: /healthz
              port: 10251
            initialDelaySeconds: 15
            timeoutSeconds: 1
  - path: /srv/kubernetes/manifests/kube-system.json
    content: |
      {
        "apiVersion": "v1",
        "kind": "Namespace",
        "metadata": {
          "name": "kube-system"
        }
      }
  - path: /srv/kubernetes/manifests/kube-dns-rc.json
    content: |
      {
        "apiVersion": "v1",
        "kind": "ReplicationController",
        "metadata": {
          "name": "kube-dns-v20",
          "namespace": "kube-system",
          "labels": {
            "k8s-app": "kube-dns",
            "kubernetes.io/cluster-service": "true",
            "version": "v20"
          }
        },
        "spec": {
          "replicas": 1,
          "selector": {
            "k8s-app": "kube-dns",
            "version": "v20"
          },
          "template": {
            "metadata": {
              "annotations": {
                "scheduler.alpha.kubernetes.io/critical-pod": "",
                "scheduler.alpha.kubernetes.io/tolerations": "[{\"key\":\"CriticalAddonsOnly\", \"operator\":\"Exists\"}]"
              },
              "labels": {
                "k8s-app": "kube-dns",
                "version": "v20"
              }
            },
            "spec": {
              "containers": [
                {
                  "name": "kubedns",
                  "image": "${kubedns_image_repo}:${kubedns_version}",
                  "resources": {
                    "limits": {
                      "memory": "170Mi"
                    },
                    "requests": {
                      "cpu": "100m",
                      "memory": "70Mi"
                    }
                  },
                  "livenessProbe": {
                    "failureThreshold": 5,
                    "httpGet": {
                      "path": "/healthz-kubedns",
                      "port": 8080,
                      "scheme": "HTTP"
                    },
                    "initialDelaySeconds": 60,
                    "periodSeconds": 10,
                    "successThreshold": 1,
                    "timeoutSeconds": 5
                  },
                  "readinessProbe": {
                    "failureThreshold": 3,
                    "httpGet": {
                      "path": "/readiness",
                      "port": 8081,
                      "scheme": "HTTP"
                    },
                    "initialDelaySeconds": 3,
                    "periodSeconds": 10,
                    "successThreshold": 1,
                    "timeoutSeconds": 5
                  },
                  "args": [
                    "--domain=cluster.local.",
                    "--dns-port=10053"
                  ],
                  "ports": [
                    {
                      "containerPort": 10053,
                      "name": "dns-local",
                      "protocol": "UDP"
                    },
                    {
                      "containerPort": 10053,
                      "name": "dns-tcp-local",
                      "protocol": "TCP"
                    }
                  ]
                },
                {
                  "name": "dnsmasq",
                  "image": "${kubednsmasq_image_repo}:${kubednsmasq_version}",
                  "livenessProbe": {
                    "failureThreshold": 5,
                    "httpGet": {
                      "path": "/healthz-dnsmasq",
                      "port": 8080,
                      "scheme": "HTTP"
                    },
                    "initialDelaySeconds": 60,
                    "periodSeconds": 10,
                    "successThreshold": 1,
                    "timeoutSeconds": 5
                  },
                  "args": [
                    "--cache-size=1000",
                    "--no-resolv",
                    "--server=127.0.0.1#10053",
                    "--log-facility=-"
                  ],
                  "ports": [
                    {
                      "containerPort": 53,
                      "name": "dns",
                      "protocol": "UDP"
                    },
                    {
                      "containerPort": 53,
                      "name": "dns-tcp",
                      "protocol": "TCP"
                    }
                  ]
                },
                {
                  "name": "healthz",
                  "image": "${exechealthz_image_repo}:${exechealthz_version}",
                  "resources": {
                    "limits": {
                      "memory": "50Mi"
                    },
                    "requests": {
                      "cpu": "10m",
                      "memory": "50Mi"
                    }
                  },
                  "args": [
                    "--cmd=nslookup kubernetes.default.svc.cluster.local 127.0.0.1 >/dev/null",
                    "--url=/healthz-dnsmasq",
                    "--cmd=nslookup kubernetes.default.svc.cluster.local 127.0.0.1:10053 >/dev/null",
                    "--url=/healthz-kubedns",
                    "--port=8080",
                    "--quiet"
                  ],
                  "ports": [
                    {
                      "containerPort": 8080,
                      "protocol": "TCP"
                    }
                  ]
                }
              ],
              "dnsPolicy": "Default"
            }
          }
        }
      }
  - path: /srv/kubernetes/manifests/kube-dns-svc.json
    content: |
      {
        "apiVersion": "v1",
        "kind": "Service",
        "metadata": {
          "name": "kube-dns",
          "namespace": "kube-system",
          "labels": {
            "k8s-app": "kube-dns",
            "kubernetes.io/name": "KubeDNS",
            "kubernetes.io/cluster-service": "true"
          }
        },
        "spec": {
          "clusterIP": "${kubernetes_dns_service_ip}",
          "ports": [{
            "protocol": "UDP",
            "name": "dns",
            "port": 53
          }, {
            "protocol": "TCP",
            "name": "dns-tcp",
            "port": 53
          }],
          "selector": {
            "k8s-app": "kube-dns"
          }
        }
      }
  - path: /etc/systemd/system.conf.d/10-default-env.conf
    permissions: 0644
    owner: root:root
    content: |
        ${system_proxy}
  - path: /etc/docker-environment.env
    permissions: 0644
    owner: root:root
    content: |
        ${docker_proxy}
  - path: /etc/profile.env
    permissions: 0644
    owner: root:root
    content: |
        ${user_proxy}
